Generate a Solidity smart contract from the BPMN 2.0 choreography model XML provided above. 
Use the following implementation rules:
- The contract name must be the id of the choreography in the model.
- Implement a function for each `choreographyTask` for an initiating participant to execute. Use the ID as function name.
- Enforce the order of task execution based on the <sequenceFlow> and their incoming and outgoing elements in the BPMN model.
- Only choreography tasks (not gateways or events) are executable via enact.
Use the following mapping of taskID to `choreographyTask` id of the model:
```json
{{taskIDs}}
```
- Gateways are evaluated automatically inside the contract.
- All outgoing flow from an `exclusiveGateway` must enforce a condition, except the default flow.
- The conditions are given as `conditionExpression`. If no condition is met, the default flow is taken.
- Use the variable `uint public conditions` and include a setter function: `setConditions(uint _conditions) external`.
- Use the constructor `constructor(address[n] memory _participants)`, where n is the number of participants.
- Enforce that `msg.sender` equals the correct `initiatingParticipantRef` for each task.
- Use the following mapping of index of the address array to the participant id in the model:
```json
{{parIDs}}
```
- Use a variable `tokenState` to encode the current control flow position.

Just output the smart contract, do not output additional, redundant text. In case of 
problems write "ERROR" followed by a precise diagnosis of the problem.

An example.
Given the choreography
<?xml version="1.0" encoding="UTF-8"?>
<definitions id="_tTv5YOycEeiHGOQ2NkJZNQ" targetNamespace="http://bpmn.io/schema/bpmn">
  <message id="Message_032z8ml"></message>
  <message id="Message_19qrd5q"></message>
  <message id="Message_0vnm1wq"></message>
  <message id="Message_085o98p"></message>
  <choreography id="Choreography">
    <participant id="Participant_1tzf68i" name="Customer"></participant>
    <participant id="Participant_198pz14" name="Seller"></participant>
    <participant id="Participant_0378t5g" name="Manufacturer"></participant>
    <messageFlow id="MessageFlow_0r98f9o" sourceRef="Participant_198pz14" targetRef="Participant_1tzf68i" messageRef="Message_032z8ml"></messageFlow>
    <messageFlow id="MessageFlow_18xf3u6" sourceRef="Participant_198pz14" targetRef="Participant_1tzf68i" messageRef="Message_19qrd5q"></messageFlow>
    <messageFlow id="MessageFlow_0r00txu" sourceRef="Participant_198pz14" targetRef="Participant_0378t5g" messageRef="Message_0vnm1wq"></messageFlow>
    <messageFlow id="MessageFlow_1cx9rl4" sourceRef="Participant_1tzf68i" targetRef="Participant_198pz14" messageRef="Message_085o98p"></messageFlow>
    <startEvent id="Event_0y1sdn3">
      <outgoing>Flow_0e2c805</outgoing>
    </startEvent>
    <choreographyTask id="ChoreographyTask_1vnykqp" name="Check availability of goods" initiatingParticipantRef="Participant_1tzf68i">
      <incoming>Flow_0e2c805</incoming>
      <outgoing>Flow_0d6j7vb</outgoing>
      <participantRef>Participant_1tzf68i</participantRef>
      <participantRef>Participant_198pz14</participantRef>
      <messageFlowRef>MessageFlow_1cx9rl4</messageFlowRef>
    </choreographyTask>
    <choreographyTask id="ChoreographyTask_16lc74v" name="Produce goods" initiatingParticipantRef="Participant_198pz14">
      <incoming>Flow_0ybxbuc</incoming>
      <outgoing>Flow_14ulro8</outgoing>
      <participantRef>Participant_198pz14</participantRef>
      <participantRef>Participant_0378t5g</participantRef>
      <messageFlowRef>MessageFlow_0r00txu</messageFlowRef>
    </choreographyTask>
    <choreographyTask id="ChoreographyTask_07t2zjo" name="Inform customer" initiatingParticipantRef="Participant_198pz14">
      <incoming>Flow_02gqwyg</incoming>
      <outgoing>Flow_1kim4vq</outgoing>
      <participantRef>Participant_198pz14</participantRef>
      <participantRef>Participant_1tzf68i</participantRef>
      <messageFlowRef>MessageFlow_18xf3u6</messageFlowRef>
    </choreographyTask>
    <choreographyTask id="ChoreographyTask_056ylqg" name="Ship goods" initiatingParticipantRef="Participant_198pz14">
      <incoming>Flow_11zi7qu</incoming>
      <outgoing>Flow_04lnqsf</outgoing>
      <participantRef>Participant_198pz14</participantRef>
      <participantRef>Participant_1tzf68i</participantRef>
      <messageFlowRef>MessageFlow_0r98f9o</messageFlowRef>
    </choreographyTask>
    <sequenceFlow id="Flow_0e2c805" sourceRef="Event_0y1sdn3" targetRef="ChoreographyTask_1vnykqp"></sequenceFlow>
    <sequenceFlow id="Flow_0d6j7vb" sourceRef="ChoreographyTask_1vnykqp" targetRef="Gateway_1bpkhpg"></sequenceFlow>
    <sequenceFlow id="Flow_0ymdsa2" name="unavailable" sourceRef="Gateway_1bpkhpg" targetRef="Gateway_1klfaw3"></sequenceFlow>
    <sequenceFlow id="Flow_0ybxbuc" sourceRef="Gateway_1klfaw3" targetRef="ChoreographyTask_16lc74v"></sequenceFlow>
    <sequenceFlow id="Flow_02gqwyg" sourceRef="Gateway_1klfaw3" targetRef="ChoreographyTask_07t2zjo"></sequenceFlow>
    <sequenceFlow id="Flow_1kim4vq" sourceRef="ChoreographyTask_07t2zjo" targetRef="Gateway_0xcnzox"></sequenceFlow>
    <sequenceFlow id="Flow_14ulro8" sourceRef="ChoreographyTask_16lc74v" targetRef="Gateway_0xcnzox"></sequenceFlow>
    <sequenceFlow id="Flow_067nql1" name="available" sourceRef="Gateway_1bpkhpg" targetRef="Gateway_1yl9mch">
      <conditionExpression xsi:type="bpmn2:tFormalExpression" language="Solidity">conditions &amp; 1 == 1</conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="Flow_198zju1" sourceRef="Gateway_0xcnzox" targetRef="Gateway_1yl9mch"></sequenceFlow>
    <sequenceFlow id="Flow_11zi7qu" sourceRef="Gateway_1yl9mch" targetRef="ChoreographyTask_056ylqg"></sequenceFlow>
    <sequenceFlow id="Flow_04lnqsf" sourceRef="ChoreographyTask_056ylqg" targetRef="Event_1ezlk4g"></sequenceFlow>
    <exclusiveGateway id="Gateway_1bpkhpg" default="Flow_0ymdsa2">
      <incoming>Flow_0d6j7vb</incoming>
      <outgoing>Flow_0ymdsa2</outgoing>
      <outgoing>Flow_067nql1</outgoing>
    </exclusiveGateway>
    <exclusiveGateway id="Gateway_1yl9mch" default="Flow_11zi7qu">
      <incoming>Flow_067nql1</incoming>
      <incoming>Flow_198zju1</incoming>
      <outgoing>Flow_11zi7qu</outgoing>
    </exclusiveGateway>
    <parallelGateway id="Gateway_1klfaw3">
      <incoming>Flow_0ymdsa2</incoming>
      <outgoing>Flow_0ybxbuc</outgoing>
      <outgoing>Flow_02gqwyg</outgoing>
    </parallelGateway>
    <parallelGateway id="Gateway_0xcnzox">
      <incoming>Flow_1kim4vq</incoming>
      <incoming>Flow_14ulro8</incoming>
      <outgoing>Flow_198zju1</outgoing>
    </parallelGateway>
    <endEvent id="Event_1ezlk4g">
      <incoming>Flow_04lnqsf</incoming>
    </endEvent>
  </choreography>
</definitions>
A correct implementation is:
```solidity
// SPDX-License-Identifier: MIT
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract Choreography {
    address[3] public participants; // [Customer, Seller, Manufacturer]
    uint public conditions;

    // tokenState represents current position in the process
    // 0 = start, 1 = Check availability, 2 = Produce goods,
    // 3 = Inform customer, 4 = Wait, 5 = Ship goods, 6 = Done
    uint public tokenState = 1;

    bool public produced = false;
    bool public informed = false;

    constructor(address[3] memory _participants) {
        participants = _participants;
    }

    function setConditions(uint _conditions) external {
        conditions = _conditions;
    }

    // Task 0: Check availability (Customer)
    function ChoreographyTask_1vnykqp() external {
        require(tokenState == 1, "Not at Check availability step");
        require(msg.sender == participants[0], "Only Customer");

        if ((conditions & 1) == 1) {
            tokenState = 5; // Go directly to Ship goods
        } else {
            tokenState = 2; // Next: Produce goods
        }
    }

    // Task 1: Produce goods (Seller)
    function ChoreographyTask_16lc74v() external {
        require(tokenState == 2, "Not at Produce goods step");
        require(msg.sender == participants[1], "Only Seller");

        produced = true;
        tokenState = 3; // Next: Inform customer
    }

    // Task 2: Inform customer (Seller)
    function ChoreographyTask_07t2zjo() external {
        require(tokenState == 3, "Not at Inform customer step");
        require(msg.sender == participants[1], "Only Seller");

        informed = true;

        if (produced) {
            tokenState = 5; // Both parallel tasks done, move to Ship
        } else {
            tokenState = 4; // Wait for produce to finish
        }
    }

    // Task 3: Ship goods (Seller)
    function ChoreographyTask_056ylqg() external {
        require(
            tokenState == 5 ||
            (tokenState == 4 && produced),
            "Not ready to ship"
        );
        require(msg.sender == participants[1], "Only Seller");

        tokenState = 6; // Done
    }
}
```