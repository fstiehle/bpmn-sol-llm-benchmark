Generate a Solidity smart contract from the BPMN 2.0 choreography model XML provided above.

Use the following implementation rules:

- The contract name must be the `id` of the `<choreography>` element in the model.
- Implement the function `enact(uint taskID) external` which allows a participant to execute a choreography task.
- Only `<choreographyTask>` elements are executable via `enact()`. Gateways and start/end events are handled internally.
- Enforce the order of task execution based on `<sequenceFlow>` elements and the choreography's control flow.
Use the following mapping of taskID to `choreographyTask` id of the model:
```json
{{taskIDs}}
```
- Implement exclusive gateways (`<exclusiveGateway>`) using Solidity conditional logic.
  - Each exclusive gateway must evaluate all conditional `<sequenceFlow>` elements when active.
  - Use Solidity `if (conditions & N == N)` syntax, exactly as defined in the `<conditionExpression>`.
  - If at least one condition is satisfied, activate the target task.
  - If none are satisfied, follow the `default` sequenceFlow.
  - Each condition must be evaluated only when the gateway's bit is active in `tokenState`.
  - Use a variable `uint public conditions` and include a setter: `function setConditions(uint _conditions) external`.

- Implement parallel gateways (`<parallelGateway>`) as:
  - Join: wait for all incoming tokens to activate.
  - Split: activate all outgoing tasks concurrently.

- Use `uint public tokenState` to encode current control flow positions:
  - Each active task or gateway is tracked using a unique bit (e.g., 1, 2, 4, 8...).
  - Use bitmasking (`&`, `|`, `~`) to activate or deactivate paths.
  - Transitions may activate multiple concurrent paths.

- The flow may include loops. 
  - Use taksID `0` as a no operation, and set taskID to `0` after every task execution, so there are no infinite task loops.

- Use the constructor: `constructor(address[n] memory _participants)` where `n` is the number of participants.
- Allow execution of each task only by the correct initiating participant, using:
  ```solidity
  require(msg.sender == participants[i]);
  ```
- Use this mapping of participant index to participant ID:
```json
{{parIDs}}
```

- At the end of the process, set `tokenState = 0` to indicate termination.
- Do not output any text other than the Solidity contract itself.

An example.
Given the choreography
```XML
<?xml version="1.0" encoding="UTF-8"?>
<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xs="http://www.w3.org/2001/XMLSchema" id="_tTv5YOycEeiHGOQ2NkJZNQ" targetNamespace="http://bpmn.io/schema/bpmn">
  <bpmn2:message id="Message_032z8ml"></bpmn2:message>
  <bpmn2:message id="Message_19qrd5q"></bpmn2:message>
  <bpmn2:message id="Message_0vnm1wq"></bpmn2:message>
  <bpmn2:message id="Message_085o98p"></bpmn2:message>
  <bpmn2:choreography id="Choreography">
    <bpmn2:participant id="Participant_1tzf68i" name="Customer"></bpmn2:participant>
    <bpmn2:participant id="Participant_198pz14" name="Seller"></bpmn2:participant>
    <bpmn2:participant id="Participant_0378t5g" name="Manufacturer"></bpmn2:participant>
    <bpmn2:messageFlow id="MessageFlow_0r98f9o" sourceRef="Participant_198pz14" targetRef="Participant_1tzf68i" messageRef="Message_032z8ml"></bpmn2:messageFlow>
    <bpmn2:messageFlow id="MessageFlow_18xf3u6" sourceRef="Participant_198pz14" targetRef="Participant_1tzf68i" messageRef="Message_19qrd5q"></bpmn2:messageFlow>
    <bpmn2:messageFlow id="MessageFlow_0r00txu" sourceRef="Participant_198pz14" targetRef="Participant_0378t5g" messageRef="Message_0vnm1wq"></bpmn2:messageFlow>
    <bpmn2:messageFlow id="MessageFlow_1cx9rl4" sourceRef="Participant_1tzf68i" targetRef="Participant_198pz14" messageRef="Message_085o98p"></bpmn2:messageFlow>
    <bpmn2:startEvent id="Event_0y1sdn3">
      <bpmn2:outgoing>Flow_0e2c805</bpmn2:outgoing>
    </bpmn2:startEvent>
    <bpmn2:choreographyTask id="ChoreographyTask_1vnykqp" name="Order goods" initiatingParticipantRef="Participant_1tzf68i">
      <bpmn2:incoming>Flow_0e2c805</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0d6j7vb</bpmn2:outgoing>
      <bpmn2:participantRef>Participant_1tzf68i</bpmn2:participantRef>
      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>
      <bpmn2:messageFlowRef>MessageFlow_1cx9rl4</bpmn2:messageFlowRef>
    </bpmn2:choreographyTask>
    <bpmn2:choreographyTask id="ChoreographyTask_16lc74v" name="Produce goods" initiatingParticipantRef="Participant_198pz14">
      <bpmn2:incoming>Flow_0ybxbuc</bpmn2:incoming>
      <bpmn2:outgoing>Flow_14ulro8</bpmn2:outgoing>
      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>
      <bpmn2:participantRef>Participant_0378t5g</bpmn2:participantRef>
      <bpmn2:messageFlowRef>MessageFlow_0r00txu</bpmn2:messageFlowRef>
    </bpmn2:choreographyTask>
    <bpmn2:choreographyTask id="ChoreographyTask_07t2zjo" name="Inform customer" initiatingParticipantRef="Participant_198pz14">
      <bpmn2:incoming>Flow_02gqwyg</bpmn2:incoming>
      <bpmn2:outgoing>Flow_1kim4vq</bpmn2:outgoing>
      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>
      <bpmn2:participantRef>Participant_1tzf68i</bpmn2:participantRef>
      <bpmn2:messageFlowRef>MessageFlow_18xf3u6</bpmn2:messageFlowRef>
    </bpmn2:choreographyTask>
    <bpmn2:choreographyTask id="ChoreographyTask_056ylqg" name="Ship goods" initiatingParticipantRef="Participant_198pz14">
      <bpmn2:incoming>Flow_11zi7qu</bpmn2:incoming>
      <bpmn2:outgoing>Flow_04lnqsf</bpmn2:outgoing>
      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>
      <bpmn2:participantRef>Participant_1tzf68i</bpmn2:participantRef>
      <bpmn2:messageFlowRef>MessageFlow_0r98f9o</bpmn2:messageFlowRef>
    </bpmn2:choreographyTask>
    <bpmn2:sequenceFlow id="Flow_0e2c805" sourceRef="Event_0y1sdn3" targetRef="ChoreographyTask_1vnykqp"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_0d6j7vb" sourceRef="ChoreographyTask_1vnykqp" targetRef="Gateway_1bpkhpg"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_0ymdsa2" name="unavailable" sourceRef="Gateway_1bpkhpg" targetRef="Gateway_1klfaw3"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_0ybxbuc" sourceRef="Gateway_1klfaw3" targetRef="ChoreographyTask_16lc74v"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_02gqwyg" sourceRef="Gateway_1klfaw3" targetRef="ChoreographyTask_07t2zjo"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_1kim4vq" sourceRef="ChoreographyTask_07t2zjo" targetRef="Gateway_0xcnzox"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_14ulro8" sourceRef="ChoreographyTask_16lc74v" targetRef="Gateway_0xcnzox"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_067nql1" name="conditions &amp; 1 == 1" sourceRef="Gateway_1bpkhpg" targetRef="Gateway_1yl9mch">
      <conditionExpression xsi:type="bpmn2:tFormalExpression" language="Solidity">conditions &amp; 1 == 1</conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_198zju1" sourceRef="Gateway_0xcnzox" targetRef="Gateway_1yl9mch"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_11zi7qu" sourceRef="Gateway_1yl9mch" targetRef="ChoreographyTask_056ylqg"></bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_04lnqsf" sourceRef="ChoreographyTask_056ylqg" targetRef="Event_1ezlk4g"></bpmn2:sequenceFlow>
    <bpmn2:exclusiveGateway id="Gateway_1bpkhpg" default="Flow_0ymdsa2">
      <bpmn2:incoming>Flow_0d6j7vb</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0ymdsa2</bpmn2:outgoing>
      <bpmn2:outgoing>Flow_067nql1</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:exclusiveGateway id="Gateway_1yl9mch" default="Flow_11zi7qu">
      <bpmn2:incoming>Flow_067nql1</bpmn2:incoming>
      <bpmn2:incoming>Flow_198zju1</bpmn2:incoming>
      <bpmn2:outgoing>Flow_11zi7qu</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:parallelGateway id="Gateway_1klfaw3">
      <bpmn2:incoming>Flow_0ymdsa2</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0ybxbuc</bpmn2:outgoing>
      <bpmn2:outgoing>Flow_02gqwyg</bpmn2:outgoing>
    </bpmn2:parallelGateway>
    <bpmn2:parallelGateway id="Gateway_0xcnzox">
      <bpmn2:incoming>Flow_1kim4vq</bpmn2:incoming>
      <bpmn2:incoming>Flow_14ulro8</bpmn2:incoming>
      <bpmn2:outgoing>Flow_198zju1</bpmn2:outgoing>
    </bpmn2:parallelGateway>
    <bpmn2:endEvent id="Event_1ezlk4g">
      <bpmn2:incoming>Flow_04lnqsf</bpmn2:incoming>
    </bpmn2:endEvent>
  </bpmn2:choreography>
</bpmn2:definitions>
```
A correct implementation is:
```solidity
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;
contract comp_Choreography {
  uint public tokenState = 1;
  address[3] public participants;
  uint public conditions;
  constructor(address[3] memory _participants) {
    participants = _participants;
  }
  function setConditions(uint _conditions) external {
    conditions = _conditions;
  }
  function enact(uint id) external {
    uint _tokenState = tokenState;
    while(_tokenState != 0) {
      if (_tokenState & 1 == 1) {
        // <--- ChoreographyTask_1vnykqp Order goods --->
        if (1 == id && msg.sender == participants[0]) {
        // <--- custom code for task here --->
        _tokenState &= ~uint(1);
        _tokenState |= 6;
        id = 0;
        continue; 
        }
      }
      if (_tokenState & 2 == 2) {
        // <--- ChoreographyTask_16lc74v Produce goods --->
        if (2 == id && msg.sender == participants[1]) {
        // <--- custom code for task here --->
        _tokenState &= ~uint(2);
        _tokenState |= 8;
        id = 0;
        continue; 
        }
      }
      if (_tokenState & 4 == 4) {
        // <--- ChoreographyTask_07t2zjo Inform customer --->
        if (3 == id && msg.sender == participants[1]) {
        // <--- custom code for task here --->
        _tokenState &= ~uint(4);
        _tokenState |= 16;
        id = 0;
        continue; 
        }
      }
      if (_tokenState & 32 == 32) {
        // <--- ChoreographyTask_056ylqg Ship goods --->
        if (4 == id && msg.sender == participants[1]) {
        // <--- custom code for task here --->
        _tokenState &= ~uint(32);
        _tokenState |= 0;
        break; // is end
        }
      }
      if (_tokenState & 6 == 6) {
        if (conditions & 1 == 1) {
          // <---  auto transition  --->
          _tokenState &= ~uint(6);
          _tokenState |= 32;
          continue; 
        }
      }
      if (_tokenState & 24 == 24) {
        // <---  auto transition  --->
        _tokenState &= ~uint(24);
        _tokenState |= 32;
        continue; 
      }
      break;
    }
    tokenState = _tokenState;
  }
}
```