Generate a Solidity smart contract from the BPMN 2.0 choreography model XML provided above.
Use the following implementation rules:
- The contract name must be the `id` of the `<choreography>` element in the model.
- Implement the function `enact(uint taskID) external` which allows a participant to execute a choreography task.
- Only `<choreographyTask>` elements are executable via `enact()`. Gateways and start and end events are handled internally.
- Enforce the order of task execution based on `<sequenceFlow>` elements and the choreography's control flow.
Use the following mapping of taskID to `choreographyTask` id of the model:
```json
{{taskIDs}}
```
- Implement exclusive gateways (`exclusiveGateway`s) using Solidity conditional logic.
- All outgoing flows (`<sequenceFlow>`s) from an exclusive gateway must enforce a condition, except the default flow.
- All `<sequenceFlow>`s with a `conditionExpression` must be implemented exactly as in `<conditionExpression>...</conditionExpression>`, 
and should only be evaluated when their source gateway is active.
- Ensure that each conditional branch must check its associated condition before permitting task execution.
- Default branches from exclusive gateways (i.e., the `default` attribute) must be treated as fallback paths if none of the conditions are satisfied.
- Use a variable `uint public conditions` and include a setter: `function setConditions(uint _conditions) external`.
- For parallel gateways, the following tasks can be taken in any order but it has to wait for all incoming flows before continuing.
- Use the constructor `constructor(address[n] memory _participants)`, where n is the number of participants.
- Allow execution of each task only by the correct initiating participant by enforcing that `msg.sender` equals the correct `initiatingParticipantRef`.
- Use the following mapping of index of the address array to the participant id in the model:
```json
{{parIDs}}
```
- Use a variable `tokenState` to encode the current control flow position.
- At the end of the process, set the `tokenState` variable to zero.
Just output the smart contract, do not output additional, redundant text.