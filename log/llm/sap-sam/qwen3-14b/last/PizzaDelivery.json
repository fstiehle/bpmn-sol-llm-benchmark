{
  "name": "Test 1",
  "description": "This is the first test.",
  "timestamp": "2025-05-25T20:29:29.484Z",
  "model": "qwen3-14b",
  "prompt": "Above is a BPMN 2.0 choreography. Generate a solidity smart contract from this. \nName the contract by the choreography ID.\nThe contract must implement the function \"enact(uint taskID)\", which lets a participant execute a task.\nThe function enforces the order of tasks. \nExtract the rules based on the flow given in the diagram, only tasks need to be enacted manually. \nThe different taskIDs can be extracted from the model as follows:\n{\"ChoreographyTask_0hy9n0g\":1,\"ChoreographyTask_1b2vkz9\":2,\"ChoreographyTask_1jrfmx8\":3,\"ChoreographyTask_1797ws1\":4}\n\nOutgoing flows from an exclusiveGateway which are not the default flow, need to enforce a condition.\nThe conditions are present in the model as \"conditionExpression\". Enforce them based on the flow given in the diagram.\nThe contracts needs a function \"setconditions(uint _conditions)\".\n\nAlso, enforce the correct participant of a task by comparing the address of the caller with the required address of the participant.\nParticipants' addresses are set in the constructor \"constructor(address[n] memory _participants)\", \nwhere n stands for the number of participants. You must encode them like follows: \n{\"Participant_06qakjv\":0,\"Participant_0mgz9si\":1,\"Participant_0537iz2\":2}\n\nThe current state of the contract must be encoded in the \"tokenState\" variable or function.\nJust output the smart contract, do not output additional, redundant text. In case of \nproblems write \"ERROR\" followed by a precise diagnosis of the problem.\nStart writing the smart contract:",
  "input": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions id=\"_tTv5YOycEeiHGOQ2NkJZNQ\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <message id=\"Message_0cxtsts\"></message>\n  <message id=\"Message_11aqot7\"></message>\n  <message id=\"Message_1n1tjfo\"></message>\n  <message id=\"Message_1pam53q\" name=\"pizza orde\"></message>\n  <choreography id=\"PizzaDelivery\">\n    <participant id=\"Participant_06qakjv\" name=\"Customer\"></participant>\n    <participant id=\"Participant_0mgz9si\" name=\"Pizza Place\"></participant>\n    <participant id=\"Participant_0537iz2\" name=\"Delivery Boy\"></participant>\n    <messageFlow id=\"MessageFlow_0qo1upk\" sourceRef=\"Participant_0537iz2\" targetRef=\"Participant_06qakjv\" messageRef=\"Message_0cxtsts\"></messageFlow>\n    <messageFlow id=\"MessageFlow_12ydots\" sourceRef=\"Participant_0mgz9si\" targetRef=\"Participant_06qakjv\" messageRef=\"Message_11aqot7\"></messageFlow>\n    <messageFlow id=\"MessageFlow_0tfwexj\" sourceRef=\"Participant_0mgz9si\" targetRef=\"Participant_06qakjv\" messageRef=\"Message_1n1tjfo\"></messageFlow>\n    <messageFlow id=\"MessageFlow_0nzo41l\" sourceRef=\"Participant_06qakjv\" targetRef=\"Participant_0mgz9si\" messageRef=\"Message_1pam53q\"></messageFlow>\n    <startEvent id=\"StartEvent_00yy9i8\">\n      <outgoing>SequenceFlow_0dy5er9</outgoing>\n    </startEvent>\n    <choreographyTask id=\"ChoreographyTask_0hy9n0g\" name=\"Order Pizza\" initiatingParticipantRef=\"Participant_06qakjv\">\n      <incoming>SequenceFlow_0dy5er9</incoming>\n      <outgoing>SequenceFlow_036yo13</outgoing>\n      <participantRef>Participant_06qakjv</participantRef>\n      <participantRef>Participant_0mgz9si</participantRef>\n      <messageFlowRef>MessageFlow_0nzo41l</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_1b2vkz9\" name=\"Confirm ETA\" initiatingParticipantRef=\"Participant_0mgz9si\">\n      <incoming>Flow_1uhdzct</incoming>\n      <outgoing>Flow_0y1kbgm</outgoing>\n      <participantRef>Participant_0mgz9si</participantRef>\n      <participantRef>Participant_06qakjv</participantRef>\n      <messageFlowRef>MessageFlow_0tfwexj</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_1jrfmx8\" name=\"Announce Delivery\" initiatingParticipantRef=\"Participant_0mgz9si\">\n      <incoming>Flow_0y1kbgm</incoming>\n      <outgoing>Flow_1mu041j</outgoing>\n      <participantRef>Participant_0mgz9si</participantRef>\n      <participantRef>Participant_06qakjv</participantRef>\n      <messageFlowRef>MessageFlow_12ydots</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_1797ws1\" name=\"Deliver Pizza\" initiatingParticipantRef=\"Participant_0537iz2\">\n      <incoming>Flow_16j5p8v</incoming>\n      <outgoing>Flow_0p1us2t</outgoing>\n      <participantRef>Participant_0537iz2</participantRef>\n      <participantRef>Participant_06qakjv</participantRef>\n      <messageFlowRef>MessageFlow_0qo1upk</messageFlowRef>\n    </choreographyTask>\n    <sequenceFlow id=\"SequenceFlow_0dy5er9\" sourceRef=\"StartEvent_00yy9i8\" targetRef=\"ChoreographyTask_0hy9n0g\"></sequenceFlow>\n    <sequenceFlow id=\"SequenceFlow_036yo13\" sourceRef=\"ChoreographyTask_0hy9n0g\" targetRef=\"Gateway_1td68h3\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0mkbrl0\" name=\"pizza ready\" sourceRef=\"Gateway_1td68h3\" targetRef=\"Gateway_0x44u2n\">\n      <conditionExpression xsi:type=\"bpmn2:tFormalExpression\" language=\"Solidity\">conditions &amp; 1 == 1</conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"Flow_1uhdzct\" name=\"Pizza needs to be baked\" sourceRef=\"Gateway_1td68h3\" targetRef=\"ChoreographyTask_1b2vkz9\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_16j5p8v\" sourceRef=\"Gateway_0x44u2n\" targetRef=\"ChoreographyTask_1797ws1\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0y1kbgm\" sourceRef=\"ChoreographyTask_1b2vkz9\" targetRef=\"ChoreographyTask_1jrfmx8\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_1mu041j\" sourceRef=\"ChoreographyTask_1jrfmx8\" targetRef=\"Gateway_0x44u2n\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0p1us2t\" sourceRef=\"ChoreographyTask_1797ws1\" targetRef=\"EndEvent_1lv264w\"></sequenceFlow>\n    <endEvent id=\"EndEvent_1lv264w\">\n      <incoming>Flow_0p1us2t</incoming>\n    </endEvent>\n    <exclusiveGateway id=\"Gateway_1td68h3\" default=\"Flow_1uhdzct\">\n      <incoming>SequenceFlow_036yo13</incoming>\n      <outgoing>Flow_0mkbrl0</outgoing>\n      <outgoing>Flow_1uhdzct</outgoing>\n    </exclusiveGateway>\n    <exclusiveGateway id=\"Gateway_0x44u2n\" default=\"Flow_16j5p8v\">\n      <incoming>Flow_1mu041j</incoming>\n      <incoming>Flow_0mkbrl0</incoming>\n      <outgoing>Flow_16j5p8v</outgoing>\n    </exclusiveGateway>\n  </choreography>\n</definitions>\n",
  "output": "```solidity\npragma solidity ^0.8.0;\n\ncontract PizzaDelivery {\n    enum Task {\n        Start,\n        OrderPizza,\n        ConfirmETA,\n        AnnounceDelivery,\n        DeliverPizza,\n        End\n    }\n\n    address[3] public participants;\n    uint public tokenState;\n    uint public conditions;\n\n    mapping(Task => uint) private taskIDMap;\n\n    constructor(address[3] memory _participants) {\n        participants = _participants;\n        taskIDMap[Task.OrderPizza] = 1;\n        taskIDMap[Task.ConfirmETA] = 2;\n        taskIDMap[Task.AnnounceDelivery] = 3;\n        taskIDMap[Task.DeliverPizza] = 4;\n        tokenState = uint(Task.Start);\n    }\n\n    function setconditions(uint _conditions) public {\n        conditions = _conditions;\n    }\n\n    function enact(uint taskID) public {\n        require(\n            msg.sender == participants[getParticipantIndex(tokenState)],\n            \"Only the correct participant can enact this task.\"\n        );\n\n        if (tokenState == uint(Task.Start)) {\n            require(taskID == taskIDMap[Task.OrderPizza], \"Invalid task for current state.\");\n            tokenState = uint(Task.OrderPizza);\n        } else if (tokenState == uint(Task.OrderPizza)) {\n            require(taskID == taskIDMap[Task.ConfirmETA] || taskID == taskIDMap[Task.DeliverPizza], \"Invalid task for current state.\");\n\n            if (taskID == taskIDMap[Task.ConfirmETA]) {\n                require((conditions & 1) == 1, \"Condition not met for Confirm ETA.\");\n                tokenState = uint(Task.ConfirmETA);\n            } else if (taskID == taskIDMap[Task.DeliverPizza]) {\n                require((conditions & 1) == 0, \"Condition not met for Deliver Pizza.\");\n                tokenState = uint(Task.DeliverPizza);\n            }\n        } else if (tokenState == uint(Task.ConfirmETA)) {\n            require(taskID == taskIDMap[Task.AnnounceDelivery], \"Invalid task for current state.\");\n            tokenState = uint(Task.AnnounceDelivery);\n        } else if (tokenState == uint(Task.AnnounceDelivery)) {\n            require(taskID == taskIDMap[Task.DeliverPizza], \"Invalid task for current state.\");\n            tokenState = uint(Task.DeliverPizza);\n        } else if (tokenState == uint(Task.DeliverPizza)) {\n            require(taskID == taskIDMap[Task.End], \"Invalid task for current state.\");\n            tokenState = uint(Task.End);\n        } else if (tokenState == uint(Task.End)) {\n            revert(\"Process already completed.\");\n        } else {\n            revert(\"Unknown state.\");\n        }\n    }\n\n    function getParticipantIndex(uint state) private pure returns (uint) {\n        if (state == uint(Task.OrderPizza) || state == uint(Task.ConfirmETA) || state == uint(Task.AnnounceDelivery)) {\n            return 0; // Customer\n        } else if (state == uint(Task.DeliverPizza)) {\n            return 2; // Delivery Boy\n        } else if (state == uint(Task.Start) || state == uint(Task.End)) {\n            return 0; // Customer\n        } else {\n            return 1; // Pizza Place\n        }\n    }\n}\n```",
  "processID": "PizzaDelivery"
}