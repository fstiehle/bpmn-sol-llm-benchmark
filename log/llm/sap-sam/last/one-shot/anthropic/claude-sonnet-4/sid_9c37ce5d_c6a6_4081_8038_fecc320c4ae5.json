{
  "name": "anthropic/claude-sonnet-4 - one-shot",
  "processID": "sid_9c37ce5d_c6a6_4081_8038_fecc320c4ae5",
  "timestamp": "2025-06-12T04:26:55.105Z",
  "model": "anthropic/claude-sonnet-4",
  "compiled": true,
  "usage": {
    "prompt_tokens": 7098,
    "completion_tokens": 527,
    "total_tokens": 7625,
    "cost": 0.029199
  },
  "prompt": "Generate a Solidity smart contract from the BPMN 2.0 choreography model XML provided above.\n\nUse the following implementation rules:\n\n- The contract name must be the `id` of the `<choreography>` element in the model.\n- Implement the function `enact(uint taskID) external` which allows a participant to execute a choreography task.\n- Only `<choreographyTask>` elements are executable via `enact()`. Gateways and start/end events are handled internally.\n- Enforce the order of task execution based on `<sequenceFlow>` elements and the choreography's control flow.\nUse the following mapping of taskID to `choreographyTask` id of the model:\n```json\n{\"sid-E2260B7C-2453-4ED3-8F1F-458552A96F90\":1,\"sid-5DFD2925-5FC4-49A5-A532-6E1895707F23\":2,\"sid-4F7B8C9B-B728-4743-A6A1-8B0D37A9E487\":3}\n```\n- Implement exclusive gateways (`<exclusiveGateway>`) using Solidity conditional logic.\n  - Each exclusive gateway must evaluate all conditional `<sequenceFlow>` elements when active.\n  - Use Solidity `if (conditions & N == N)` syntax, exactly as defined in the `<conditionExpression>`.\n  - If at least one condition is satisfied, activate the target task.\n  - If none are satisfied, follow the `default` sequenceFlow.\n  - Each condition must be evaluated only when the gateway's bit is active in `tokenState`.\n  - Use a variable `uint public conditions` and include a setter: `function setConditions(uint _conditions) external`.\n\n- Implement parallel gateways (`<parallelGateway>`) as:\n  - Join: wait for all incoming tokens to activate.\n  - Split: activate all outgoing tasks concurrently.\n\n- Use `uint public tokenState` to encode current control flow positions:\n  - Each active task or gateway is tracked using a unique bit (e.g., 1, 2, 4, 8...).\n  - Use bitmasking (`&`, `|`, `~`) to activate or deactivate paths.\n  - Transitions may activate multiple concurrent paths.\n\n- The flow may include loops. \n  - Use taksID `0` as a no operation, and set taskID to `0` after every task execution, so there are no infinite task loops.\n\n- Use the constructor: `constructor(address[n] memory _participants)` where `n` is the number of participants.\n- Allow execution of each task only by the correct initiating participant, using:\n  ```solidity\n  require(msg.sender == participants[i]);\n  ```\n- Use this mapping of participant index to participant ID:\n```json\n{\"sid-FFBBBE43-8E34-42F1-A5B5-8D9A2C160792\":0,\"sid-97A42280-1CF8-4758-A2F0-DCF06E7F0F6C\":1,\"sid-850FEFB6-7E37-4C41-A343-5C3E1CEED8F3\":2,\"sid-96551302-80BD-4A7D-8B31-CE95A7EA4CB3\":3,\"sid-868FFA39-F8BB-4A9A-9961-24599783527E\":4,\"sid-A77DBC35-4ECD-4326-B975-CAF692BE3AF9\":5}\n```\n\n- At the end of the process, set `tokenState = 0` to indicate termination.\n- If you use text from the model in the code, you must properly escape it (no -, no umlauts).\n- Do not output any text other than the Solidity contract itself.\n\nAn example.\nGiven the choreography\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" id=\"_tTv5YOycEeiHGOQ2NkJZNQ\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn2:message id=\"Message_032z8ml\"></bpmn2:message>\n  <bpmn2:message id=\"Message_19qrd5q\"></bpmn2:message>\n  <bpmn2:message id=\"Message_0vnm1wq\"></bpmn2:message>\n  <bpmn2:message id=\"Message_085o98p\"></bpmn2:message>\n  <bpmn2:choreography id=\"Choreography\">\n    <bpmn2:participant id=\"Participant_1tzf68i\" name=\"Customer\"></bpmn2:participant>\n    <bpmn2:participant id=\"Participant_198pz14\" name=\"Seller\"></bpmn2:participant>\n    <bpmn2:participant id=\"Participant_0378t5g\" name=\"Manufacturer\"></bpmn2:participant>\n    <bpmn2:messageFlow id=\"MessageFlow_0r98f9o\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_032z8ml\"></bpmn2:messageFlow>\n    <bpmn2:messageFlow id=\"MessageFlow_18xf3u6\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_19qrd5q\"></bpmn2:messageFlow>\n    <bpmn2:messageFlow id=\"MessageFlow_0r00txu\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_0378t5g\" messageRef=\"Message_0vnm1wq\"></bpmn2:messageFlow>\n    <bpmn2:messageFlow id=\"MessageFlow_1cx9rl4\" sourceRef=\"Participant_1tzf68i\" targetRef=\"Participant_198pz14\" messageRef=\"Message_085o98p\"></bpmn2:messageFlow>\n    <bpmn2:startEvent id=\"Event_0y1sdn3\">\n      <bpmn2:outgoing>Flow_0e2c805</bpmn2:outgoing>\n    </bpmn2:startEvent>\n    <bpmn2:choreographyTask id=\"ChoreographyTask_1vnykqp\" name=\"Order goods\" initiatingParticipantRef=\"Participant_1tzf68i\">\n      <bpmn2:incoming>Flow_0e2c805</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_0d6j7vb</bpmn2:outgoing>\n      <bpmn2:participantRef>Participant_1tzf68i</bpmn2:participantRef>\n      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>\n      <bpmn2:messageFlowRef>MessageFlow_1cx9rl4</bpmn2:messageFlowRef>\n    </bpmn2:choreographyTask>\n    <bpmn2:choreographyTask id=\"ChoreographyTask_16lc74v\" name=\"Produce goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <bpmn2:incoming>Flow_0ybxbuc</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_14ulro8</bpmn2:outgoing>\n      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>\n      <bpmn2:participantRef>Participant_0378t5g</bpmn2:participantRef>\n      <bpmn2:messageFlowRef>MessageFlow_0r00txu</bpmn2:messageFlowRef>\n    </bpmn2:choreographyTask>\n    <bpmn2:choreographyTask id=\"ChoreographyTask_07t2zjo\" name=\"Inform customer\" initiatingParticipantRef=\"Participant_198pz14\">\n      <bpmn2:incoming>Flow_02gqwyg</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_1kim4vq</bpmn2:outgoing>\n      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>\n      <bpmn2:participantRef>Participant_1tzf68i</bpmn2:participantRef>\n      <bpmn2:messageFlowRef>MessageFlow_18xf3u6</bpmn2:messageFlowRef>\n    </bpmn2:choreographyTask>\n    <bpmn2:choreographyTask id=\"ChoreographyTask_056ylqg\" name=\"Ship goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <bpmn2:incoming>Flow_11zi7qu</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_04lnqsf</bpmn2:outgoing>\n      <bpmn2:participantRef>Participant_198pz14</bpmn2:participantRef>\n      <bpmn2:participantRef>Participant_1tzf68i</bpmn2:participantRef>\n      <bpmn2:messageFlowRef>MessageFlow_0r98f9o</bpmn2:messageFlowRef>\n    </bpmn2:choreographyTask>\n    <bpmn2:sequenceFlow id=\"Flow_0e2c805\" sourceRef=\"Event_0y1sdn3\" targetRef=\"ChoreographyTask_1vnykqp\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_0d6j7vb\" sourceRef=\"ChoreographyTask_1vnykqp\" targetRef=\"Gateway_1bpkhpg\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_0ymdsa2\" name=\"unavailable\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1klfaw3\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_0ybxbuc\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_16lc74v\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_02gqwyg\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_07t2zjo\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_1kim4vq\" sourceRef=\"ChoreographyTask_07t2zjo\" targetRef=\"Gateway_0xcnzox\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_14ulro8\" sourceRef=\"ChoreographyTask_16lc74v\" targetRef=\"Gateway_0xcnzox\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_067nql1\" name=\"conditions &amp; 1 == 1\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1yl9mch\">\n      <conditionExpression xsi:type=\"bpmn2:tFormalExpression\" language=\"Solidity\">conditions &amp; 1 == 1</conditionExpression>\n    </bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_198zju1\" sourceRef=\"Gateway_0xcnzox\" targetRef=\"Gateway_1yl9mch\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_11zi7qu\" sourceRef=\"Gateway_1yl9mch\" targetRef=\"ChoreographyTask_056ylqg\"></bpmn2:sequenceFlow>\n    <bpmn2:sequenceFlow id=\"Flow_04lnqsf\" sourceRef=\"ChoreographyTask_056ylqg\" targetRef=\"Event_1ezlk4g\"></bpmn2:sequenceFlow>\n    <bpmn2:exclusiveGateway id=\"Gateway_1bpkhpg\" default=\"Flow_0ymdsa2\">\n      <bpmn2:incoming>Flow_0d6j7vb</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_0ymdsa2</bpmn2:outgoing>\n      <bpmn2:outgoing>Flow_067nql1</bpmn2:outgoing>\n    </bpmn2:exclusiveGateway>\n    <bpmn2:exclusiveGateway id=\"Gateway_1yl9mch\" default=\"Flow_11zi7qu\">\n      <bpmn2:incoming>Flow_067nql1</bpmn2:incoming>\n      <bpmn2:incoming>Flow_198zju1</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_11zi7qu</bpmn2:outgoing>\n    </bpmn2:exclusiveGateway>\n    <bpmn2:parallelGateway id=\"Gateway_1klfaw3\">\n      <bpmn2:incoming>Flow_0ymdsa2</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_0ybxbuc</bpmn2:outgoing>\n      <bpmn2:outgoing>Flow_02gqwyg</bpmn2:outgoing>\n    </bpmn2:parallelGateway>\n    <bpmn2:parallelGateway id=\"Gateway_0xcnzox\">\n      <bpmn2:incoming>Flow_1kim4vq</bpmn2:incoming>\n      <bpmn2:incoming>Flow_14ulro8</bpmn2:incoming>\n      <bpmn2:outgoing>Flow_198zju1</bpmn2:outgoing>\n    </bpmn2:parallelGateway>\n    <bpmn2:endEvent id=\"Event_1ezlk4g\">\n      <bpmn2:incoming>Flow_04lnqsf</bpmn2:incoming>\n    </bpmn2:endEvent>\n  </bpmn2:choreography>\n</bpmn2:definitions>\n```\nA correct implementation is:\n```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\ncontract comp_Choreography {\n  uint public tokenState = 1;\n  address[3] public participants;\n  uint public conditions;\n  constructor(address[3] memory _participants) {\n    participants = _participants;\n  }\n  function setConditions(uint _conditions) external {\n    conditions = _conditions;\n  }\n  function enact(uint id) external {\n    uint _tokenState = tokenState;\n    while(_tokenState != 0) {\n      if (_tokenState & 1 == 1) {\n        // <--- ChoreographyTask_1vnykqp Order goods --->\n        if (1 == id && msg.sender == participants[0]) {\n        // <--- custom code for task here --->\n        _tokenState &= ~uint(1);\n        _tokenState |= 6;\n        id = 0;\n        continue; \n        }\n      }\n      if (_tokenState & 2 == 2) {\n        // <--- ChoreographyTask_16lc74v Produce goods --->\n        if (2 == id && msg.sender == participants[1]) {\n        // <--- custom code for task here --->\n        _tokenState &= ~uint(2);\n        _tokenState |= 8;\n        id = 0;\n        continue; \n        }\n      }\n      if (_tokenState & 4 == 4) {\n        // <--- ChoreographyTask_07t2zjo Inform customer --->\n        if (3 == id && msg.sender == participants[1]) {\n        // <--- custom code for task here --->\n        _tokenState &= ~uint(4);\n        _tokenState |= 16;\n        id = 0;\n        continue; \n        }\n      }\n      if (_tokenState & 32 == 32) {\n        // <--- ChoreographyTask_056ylqg Ship goods --->\n        if (4 == id && msg.sender == participants[1]) {\n        // <--- custom code for task here --->\n        _tokenState &= ~uint(32);\n        _tokenState |= 0;\n        break; // is end\n        }\n      }\n      if (_tokenState & 6 == 6) {\n        if (conditions & 1 == 1) {\n          // <---  auto transition  --->\n          _tokenState &= ~uint(6);\n          _tokenState |= 32;\n          continue; \n        }\n      }\n      if (_tokenState & 24 == 24) {\n        // <---  auto transition  --->\n        _tokenState &= ~uint(24);\n        _tokenState |= 32;\n        continue; \n      }\n      break;\n    }\n    tokenState = _tokenState;\n  }\n}\n```",
  "input": "<ns0:definitions xmlns:ns0=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:ns2=\"http://www.signavio.com\" xmlns:ns3=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:ns4=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:ns5=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exporter=\"Signavio Process Editor, http://www.signavio.com\" exporterVersion=\"19.1.2\" expressionLanguage=\"http://www.w3.org/TR/XPath\" id=\"sid-b1bd612f-519d-4b3b-9b33-6574aab6cdc1\" targetNamespace=\"http://www.signavio.com\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd\">\n  <ns0:choreography id=\"sid_9c37ce5d_c6a6_4081_8038_fecc320c4ae5\" isClosed=\"false\">\n    <ns0:participant id=\"sid-FFBBBE43-8E34-42F1-A5B5-8D9A2C160792\" name=\"speech to text api\"></ns0:participant>\n    <ns0:participant id=\"sid-97A42280-1CF8-4758-A2F0-DCF06E7F0F6C\" name=\"masking api\"></ns0:participant>\n    <ns0:participant id=\"sid-850FEFB6-7E37-4C41-A343-5C3E1CEED8F3\" name=\"masking api\"></ns0:participant>\n    <ns0:participant id=\"sid-96551302-80BD-4A7D-8B31-CE95A7EA4CB3\" name=\"Customer Analysis api\"></ns0:participant>\n    <ns0:participant id=\"sid-868FFA39-F8BB-4A9A-9961-24599783527E\" name=\"Customer Voice api\"></ns0:participant>\n    <ns0:participant id=\"sid-A77DBC35-4ECD-4326-B975-CAF692BE3AF9\" name=\"speech to text api\"></ns0:participant>\n    <ns0:messageFlow id=\"sid-8e348584-29ea-4202-9a7e-5b67ab440a00\" sourceRef=\"sid-FFBBBE43-8E34-42F1-A5B5-8D9A2C160792\" targetRef=\"sid-97A42280-1CF8-4758-A2F0-DCF06E7F0F6C\"></ns0:messageFlow>\n    <ns0:messageFlow id=\"sid-f8dd3edd-2f19-48e7-9fab-d893645c445b\" sourceRef=\"sid-850FEFB6-7E37-4C41-A343-5C3E1CEED8F3\" targetRef=\"sid-96551302-80BD-4A7D-8B31-CE95A7EA4CB3\"></ns0:messageFlow>\n    <ns0:messageFlow id=\"sid-5ba89182-e3e0-4397-8aef-1cd0adee7ef9\" sourceRef=\"sid-868FFA39-F8BB-4A9A-9961-24599783527E\" targetRef=\"sid-A77DBC35-4ECD-4326-B975-CAF692BE3AF9\"></ns0:messageFlow>\n    <ns0:startEvent id=\"sid-CF3F66F8-EF78-4982-BFFA-8350D509FFDC\" name=\"\">\n      <ns0:outgoing>sid-E905D676-8825-4BC5-BCF7-AEFE5C09F2D1</ns0:outgoing>\n    </ns0:startEvent>\n    <ns0:choreographyTask id=\"sid-E2260B7C-2453-4ED3-8F1F-458552A96F90\" initiatingParticipantRef=\"sid-FFBBBE43-8E34-42F1-A5B5-8D9A2C160792\" loopType=\"None\" name=\"Receive Transcription\">\n      <ns0:incoming>sid-F95D16A2-E59C-4AA8-93D1-6B43E1310CEA</ns0:incoming>\n      <ns0:outgoing>sid-E17C58A3-5219-40EB-A40B-631835FE3CE5</ns0:outgoing>\n      <ns0:participantRef>sid-FFBBBE43-8E34-42F1-A5B5-8D9A2C160792</ns0:participantRef>\n      <ns0:participantRef>sid-97A42280-1CF8-4758-A2F0-DCF06E7F0F6C</ns0:participantRef>\n      <ns0:messageFlowRef>sid-8e348584-29ea-4202-9a7e-5b67ab440a00</ns0:messageFlowRef>\n    </ns0:choreographyTask>\n    <ns0:choreographyTask id=\"sid-5DFD2925-5FC4-49A5-A532-6E1895707F23\" initiatingParticipantRef=\"sid-850FEFB6-7E37-4C41-A343-5C3E1CEED8F3\" loopType=\"None\" name=\"Receive Transcription\">\n      <ns0:incoming>sid-E17C58A3-5219-40EB-A40B-631835FE3CE5</ns0:incoming>\n      <ns0:outgoing>sid-31290896-9752-49D3-916C-B5FCD7E67B42</ns0:outgoing>\n      <ns0:participantRef>sid-850FEFB6-7E37-4C41-A343-5C3E1CEED8F3</ns0:participantRef>\n      <ns0:participantRef>sid-96551302-80BD-4A7D-8B31-CE95A7EA4CB3</ns0:participantRef>\n      <ns0:messageFlowRef>sid-f8dd3edd-2f19-48e7-9fab-d893645c445b</ns0:messageFlowRef>\n    </ns0:choreographyTask>\n    <ns0:choreographyTask id=\"sid-4F7B8C9B-B728-4743-A6A1-8B0D37A9E487\" initiatingParticipantRef=\"sid-868FFA39-F8BB-4A9A-9961-24599783527E\" loopType=\"None\" name=\"Send Transcription Request\">\n      <ns0:incoming>sid-E905D676-8825-4BC5-BCF7-AEFE5C09F2D1</ns0:incoming>\n      <ns0:outgoing>sid-F95D16A2-E59C-4AA8-93D1-6B43E1310CEA</ns0:outgoing>\n      <ns0:participantRef>sid-868FFA39-F8BB-4A9A-9961-24599783527E</ns0:participantRef>\n      <ns0:participantRef>sid-A77DBC35-4ECD-4326-B975-CAF692BE3AF9</ns0:participantRef>\n      <ns0:messageFlowRef>sid-5ba89182-e3e0-4397-8aef-1cd0adee7ef9</ns0:messageFlowRef>\n    </ns0:choreographyTask>\n    <ns0:endEvent id=\"sid-F03D4A38-7A47-4EDF-BF25-51874F53D2E5\" name=\"\">\n      <ns0:incoming>sid-31290896-9752-49D3-916C-B5FCD7E67B42</ns0:incoming>\n    </ns0:endEvent>\n    <ns0:sequenceFlow id=\"sid-E17C58A3-5219-40EB-A40B-631835FE3CE5\" name=\"\" sourceRef=\"sid-E2260B7C-2453-4ED3-8F1F-458552A96F90\" targetRef=\"sid-5DFD2925-5FC4-49A5-A532-6E1895707F23\"></ns0:sequenceFlow>\n    <ns0:sequenceFlow id=\"sid-31290896-9752-49D3-916C-B5FCD7E67B42\" name=\"\" sourceRef=\"sid-5DFD2925-5FC4-49A5-A532-6E1895707F23\" targetRef=\"sid-F03D4A38-7A47-4EDF-BF25-51874F53D2E5\"></ns0:sequenceFlow>\n    <ns0:sequenceFlow id=\"sid-E905D676-8825-4BC5-BCF7-AEFE5C09F2D1\" name=\"\" sourceRef=\"sid-CF3F66F8-EF78-4982-BFFA-8350D509FFDC\" targetRef=\"sid-4F7B8C9B-B728-4743-A6A1-8B0D37A9E487\"></ns0:sequenceFlow>\n    <ns0:sequenceFlow id=\"sid-F95D16A2-E59C-4AA8-93D1-6B43E1310CEA\" name=\"\" sourceRef=\"sid-4F7B8C9B-B728-4743-A6A1-8B0D37A9E487\" targetRef=\"sid-E2260B7C-2453-4ED3-8F1F-458552A96F90\"></ns0:sequenceFlow>\n  </ns0:choreography>\n</ns0:definitions>\n",
  "output": "```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract sid_9c37ce5d_c6a6_4081_8038_fecc320c4ae5 {\n    uint public tokenState = 1;\n    address[6] public participants;\n    uint public conditions;\n\n    constructor(address[6] memory _participants) {\n        participants = _participants;\n    }\n\n    function setConditions(uint _conditions) external {\n        conditions = _conditions;\n    }\n\n    function enact(uint id) external {\n        uint _tokenState = tokenState;\n        while(_tokenState != 0) {\n            if (_tokenState & 1 == 1) {\n                // Start Event auto transition\n                _tokenState &= ~uint(1);\n                _tokenState |= 2;\n                continue;\n            }\n            if (_tokenState & 2 == 2) {\n                // ChoreographyTask Send Transcription Request\n                if (3 == id && msg.sender == participants[4]) {\n                    // custom code for task here\n                    _tokenState &= ~uint(2);\n                    _tokenState |= 4;\n                    id = 0;\n                    continue;\n                }\n            }\n            if (_tokenState & 4 == 4) {\n                // ChoreographyTask Receive Transcription\n                if (1 == id && msg.sender == participants[0]) {\n                    // custom code for task here\n                    _tokenState &= ~uint(4);\n                    _tokenState |= 8;\n                    id = 0;\n                    continue;\n                }\n            }\n            if (_tokenState & 8 == 8) {\n                // ChoreographyTask Receive Transcription\n                if (2 == id && msg.sender == participants[2]) {\n                    // custom code for task here\n                    _tokenState &= ~uint(8);\n                    _tokenState |= 0;\n                    break; // is end\n                }\n            }\n            break;\n        }\n        tokenState = _tokenState;\n    }\n}\n```"
}