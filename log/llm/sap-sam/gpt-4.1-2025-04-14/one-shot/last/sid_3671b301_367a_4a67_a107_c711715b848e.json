{
  "name": "GPT 4.1 - One Shot",
  "timestamp": "2025-06-09T23:25:56.182Z",
  "model": "gpt-4.1-2025-04-14",
  "prompt": "Generate a Solidity smart contract from the BPMN 2.0 choreography model XML provided above.\nUse the following implementation rules:\n- The contract name must be the `id` of the `<choreography>` element in the model.\n- Implement the function `enact(uint taskID) external` which allows a participant to execute a choreography task.\n- Only `<choreographyTask>` elements are executable via `enact()`. Gateways and start and end events are handled internally.\n- Enforce the order of task execution based on `<sequenceFlow>` elements and the choreography's control flow.\nUse the following mapping of taskID to `choreographyTask` id of the model:\n```json\n{\"sid-70719FD1-1348-40DB-A065-457E488DDAC4\":0,\"sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F\":1,\"sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A\":2}\n```\n- Implement exclusive gateways (`exclusiveGateway`s) using Solidity conditional logic.\n- All outgoing flows (`<sequenceFlow>`s) from an exclusive gateway must enforce a condition, except the default flow.\n- All `<sequenceFlow>`s with a `conditionExpression` must be implemented exactly as in `<conditionExpression>...</conditionExpression>`, \nand should only be evaluated when their source gateway is active.\n- Ensure that each conditional branch must check its associated condition before permitting task execution.\n- Default branches from exclusive gateways (i.e., the `default` attribute) must be treated as fallback paths if none of the conditions are satisfied.\n- Use a variable `uint public conditions` and include a setter: `function setConditions(uint _conditions) external`.\n- For parallel gateways, the following tasks can be taken in any order but it has to wait for all incoming flows before continuing.\n- Use the constructor `constructor(address[n] memory _participants)`, where n is the number of participants.\n- Allow execution of each task only by the correct initiating participant by enforcing that `msg.sender` equals the correct `initiatingParticipantRef`.\n- Use the following mapping of index of the address array to the participant id in the model:\n```json\n{\"sid-821CF910-E035-4D49-B948-8F65BB454A51\":0,\"sid-0670AAF5-D237-4731-9EF8-726C99C4BC20\":1,\"sid-32934551-C23E-48A1-81C6-D44D062E5D66\":2,\"sid-F04DC1D1-BD47-4C69-B9A9-CDA2B88C9C22\":3,\"sid-C730CE7E-408D-4080-BEB6-EB72716BA52F\":4,\"sid-243F2E1F-CBE8-400D-B73C-11759D18257B\":5}\n```\n- Use a variable `tokenState` to encode the current control flow position.\n- At the end of the process, set the `tokenState` variable to zero.\nJust output the smart contract, do not output additional, redundant text. \n\nAn example.\nGiven the choreography\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions id=\"_tTv5YOycEeiHGOQ2NkJZNQ\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <message id=\"Message_032z8ml\"></message>\n  <message id=\"Message_19qrd5q\"></message>\n  <message id=\"Message_0vnm1wq\"></message>\n  <message id=\"Message_085o98p\"></message>\n  <choreography id=\"ChoreographyExample\">\n    <participant id=\"Participant_1tzf68i\" name=\"Customer\"></participant>\n    <participant id=\"Participant_198pz14\" name=\"Seller\"></participant>\n    <participant id=\"Participant_0378t5g\" name=\"Manufacturer\"></participant>\n    <messageFlow id=\"MessageFlow_0r98f9o\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_032z8ml\"></messageFlow>\n    <messageFlow id=\"MessageFlow_18xf3u6\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_19qrd5q\"></messageFlow>\n    <messageFlow id=\"MessageFlow_0r00txu\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_0378t5g\" messageRef=\"Message_0vnm1wq\"></messageFlow>\n    <messageFlow id=\"MessageFlow_1cx9rl4\" sourceRef=\"Participant_1tzf68i\" targetRef=\"Participant_198pz14\" messageRef=\"Message_085o98p\"></messageFlow>\n    <startEvent id=\"Event_0y1sdn3\">\n      <outgoing>Flow_0e2c805</outgoing>\n    </startEvent>\n    <choreographyTask id=\"ChoreographyTask_1vnykqp\" name=\"Order goods\" initiatingParticipantRef=\"Participant_1tzf68i\">\n      <incoming>Flow_0e2c805</incoming>\n      <outgoing>Flow_0d6j7vb</outgoing>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <participantRef>Participant_198pz14</participantRef>\n      <messageFlowRef>MessageFlow_1cx9rl4</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_16lc74v\" name=\"Produce goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_0ybxbuc</incoming>\n      <outgoing>Flow_14ulro8</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_0378t5g</participantRef>\n      <messageFlowRef>MessageFlow_0r00txu</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_07t2zjo\" name=\"Inform customer\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_02gqwyg</incoming>\n      <outgoing>Flow_1kim4vq</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_18xf3u6</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_056ylqg\" name=\"Ship goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_11zi7qu</incoming>\n      <outgoing>Flow_04lnqsf</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_0r98f9o</messageFlowRef>\n    </choreographyTask>\n    <sequenceFlow id=\"Flow_0e2c805\" sourceRef=\"Event_0y1sdn3\" targetRef=\"ChoreographyTask_1vnykqp\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0d6j7vb\" sourceRef=\"ChoreographyTask_1vnykqp\" targetRef=\"Gateway_1bpkhpg\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0ymdsa2\" name=\"unavailable\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1klfaw3\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0ybxbuc\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_16lc74v\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_02gqwyg\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_07t2zjo\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_1kim4vq\" sourceRef=\"ChoreographyTask_07t2zjo\" targetRef=\"Gateway_0xcnzox\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_14ulro8\" sourceRef=\"ChoreographyTask_16lc74v\" targetRef=\"Gateway_0xcnzox\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_067nql1\" name=\"available\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1yl9mch\">\n      <conditionExpression xsi:type=\"bpmn2:tFormalExpression\" language=\"Solidity\">conditions &amp; 1 == 1</conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"Flow_198zju1\" sourceRef=\"Gateway_0xcnzox\" targetRef=\"Gateway_1yl9mch\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_11zi7qu\" sourceRef=\"Gateway_1yl9mch\" targetRef=\"ChoreographyTask_056ylqg\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_04lnqsf\" sourceRef=\"ChoreographyTask_056ylqg\" targetRef=\"Event_1ezlk4g\"></sequenceFlow>\n    <exclusiveGateway id=\"Gateway_1bpkhpg\" default=\"Flow_0ymdsa2\">\n      <incoming>Flow_0d6j7vb</incoming>\n      <outgoing>Flow_0ymdsa2</outgoing>\n      <outgoing>Flow_067nql1</outgoing>\n    </exclusiveGateway>\n    <exclusiveGateway id=\"Gateway_1yl9mch\" default=\"Flow_11zi7qu\">\n      <incoming>Flow_067nql1</incoming>\n      <incoming>Flow_198zju1</incoming>\n      <outgoing>Flow_11zi7qu</outgoing>\n    </exclusiveGateway>\n    <parallelGateway id=\"Gateway_1klfaw3\">\n      <incoming>Flow_0ymdsa2</incoming>\n      <outgoing>Flow_0ybxbuc</outgoing>\n      <outgoing>Flow_02gqwyg</outgoing>\n    </parallelGateway>\n    <parallelGateway id=\"Gateway_0xcnzox\">\n      <incoming>Flow_1kim4vq</incoming>\n      <incoming>Flow_14ulro8</incoming>\n      <outgoing>Flow_198zju1</outgoing>\n    </parallelGateway>\n    <endEvent id=\"Event_1ezlk4g\">\n      <incoming>Flow_04lnqsf</incoming>\n    </endEvent>\n  </choreography>\n</definitions>\n```\nA correct implementation is:\n```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract ChoreographyExample {\n  // The example code uses bitmasking for the current state, as it is more efficient.\n  // tokenState represents the current active elements, which can include multiple concurrent paths.\n  uint public tokenState = 1;\n  address[3] public participants;\n  uint public conditions;\n\n  constructor(address[3] memory _participants) {\n    participants = _participants;\n  }\n  function setConditions(uint _conditions) external {\n    conditions = _conditions;\n  }\n\n  function enact(uint id) external {\n    uint _tokenState = tokenState;\n\n    while(_tokenState != 0) {\n      if (_tokenState & 1 == 1) {\n        // <--- ChoreographyTask_1vnykqp Order goods --->\n        if (0 == id && msg.sender == participants[0]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(1);\n        _tokenState |= 6;\n        continue; \n        }\n      }\n      if (_tokenState & 2 == 2) {\n        // <--- ChoreographyTask_16lc74v Produce goods --->\n        if (1 == id && msg.sender == participants[1]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(2);\n        _tokenState |= 8;\n        continue; \n        }\n      }\n      if (_tokenState & 4 == 4) {\n        // <--- ChoreographyTask_07t2zjo Inform customer --->\n        if (2 == id && msg.sender == participants[1]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(4);\n        _tokenState |= 16;\n        continue; \n        }\n      }\n      if (_tokenState & 32 == 32) {\n        // <--- ChoreographyTask_056ylqg Ship goods --->\n        if (3 == id && msg.sender == participants[1]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(32);\n        _tokenState |= 0;\n        break; // is end\n        }\n      }\n      if (_tokenState & 6 == 6) {\n        if (conditions & 1 == 1) {\n          // <---  auto transition  --->\n          // Transition: deactivate current, activate next state\n          _tokenState &= ~uint(6);\n          _tokenState |= 32;\n          continue; \n        }\n      }\n      if (_tokenState & 24 == 24) {\n        // <---  auto transition  --->\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(24);\n        _tokenState |= 32;\n        continue; \n      }\n      break;\n    }\n\n    tokenState = _tokenState;\n  }\n\n}\n```",
  "input": "<ns0:definitions xmlns:ns0=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:ns2=\"http://www.signavio.com\" xmlns:ns3=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:ns4=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:ns5=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exporter=\"Signavio Process Editor, http://www.signavio.com\" exporterVersion=\"19.1.2\" expressionLanguage=\"http://www.w3.org/TR/XPath\" id=\"sid-47e8052d-5fc7-4668-bc64-104873e7958d\" targetNamespace=\"http://www.signavio.com\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd\">\n  <ns0:message id=\"sid-af71187d-1dc8-44b9-b548-a2e10f48989d\" name=\"Bestellung&amp;#10;\"></ns0:message>\n  <ns0:message id=\"sid-34f8026f-af58-4fd0-9720-69b0f528d17f\" name=\"Pizza&amp;#10;\"></ns0:message>\n  <ns0:message id=\"sid-137a8dd3-8999-48b5-b710-3db8f829bcc9\" name=\"Kassenzettel\"></ns0:message>\n  <ns0:message id=\"sid-6af75c54-3991-4d9a-a9df-3f3b459ba3f6\" name=\"Geld\"></ns0:message>\n  <ns0:choreography id=\"sid_3671b301_367a_4a67_a107_c711715b848e\" isClosed=\"false\">\n    <ns0:participant id=\"sid-821CF910-E035-4D49-B948-8F65BB454A51\" name=\"Kunde\"></ns0:participant>\n    <ns0:participant id=\"sid-0670AAF5-D237-4731-9EF8-726C99C4BC20\" name=\"Lieferant\"></ns0:participant>\n    <ns0:participant id=\"sid-32934551-C23E-48A1-81C6-D44D062E5D66\" name=\"Lieferant\"></ns0:participant>\n    <ns0:participant id=\"sid-F04DC1D1-BD47-4C69-B9A9-CDA2B88C9C22\" name=\"Kunde\"></ns0:participant>\n    <ns0:participant id=\"sid-C730CE7E-408D-4080-BEB6-EB72716BA52F\" name=\"Lieferant\"></ns0:participant>\n    <ns0:participant id=\"sid-243F2E1F-CBE8-400D-B73C-11759D18257B\" name=\"Kunde\"></ns0:participant>\n    <ns0:messageFlow id=\"sid-6b54f913-80bc-45f3-a7a0-8a1f7b78329e\" messageRef=\"sid-af71187d-1dc8-44b9-b548-a2e10f48989d\" sourceRef=\"sid-821CF910-E035-4D49-B948-8F65BB454A51\" targetRef=\"sid-0670AAF5-D237-4731-9EF8-726C99C4BC20\"></ns0:messageFlow>\n    <ns0:messageFlow id=\"sid-76c40f0c-665e-40d1-b567-8bc3925d58e9\" messageRef=\"sid-34f8026f-af58-4fd0-9720-69b0f528d17f\" sourceRef=\"sid-32934551-C23E-48A1-81C6-D44D062E5D66\" targetRef=\"sid-F04DC1D1-BD47-4C69-B9A9-CDA2B88C9C22\"></ns0:messageFlow>\n    <ns0:messageFlow id=\"sid-7a6648e1-7deb-4ba5-b39e-ea3b2f14928e\" messageRef=\"sid-137a8dd3-8999-48b5-b710-3db8f829bcc9\" sourceRef=\"sid-C730CE7E-408D-4080-BEB6-EB72716BA52F\" targetRef=\"sid-243F2E1F-CBE8-400D-B73C-11759D18257B\"></ns0:messageFlow>\n    <ns0:messageFlow id=\"sid-4d1ef1f7-cc91-4607-9647-91af961be589\" messageRef=\"sid-6af75c54-3991-4d9a-a9df-3f3b459ba3f6\" sourceRef=\"sid-243F2E1F-CBE8-400D-B73C-11759D18257B\" targetRef=\"sid-C730CE7E-408D-4080-BEB6-EB72716BA52F\"></ns0:messageFlow>\n    <ns0:choreographyTask id=\"sid-70719FD1-1348-40DB-A065-457E488DDAC4\" initiatingParticipantRef=\"sid-821CF910-E035-4D49-B948-8F65BB454A51\" loopType=\"None\" name=\"Pizza bestellen\">\n      <ns0:incoming>sid-76635492-D9AD-4F1C-B2A2-A2C4778583B2</ns0:incoming>\n      <ns0:outgoing>sid-14A00980-FCD2-45D1-BDA9-779F9345EF79</ns0:outgoing>\n      <ns0:participantRef>sid-821CF910-E035-4D49-B948-8F65BB454A51</ns0:participantRef>\n      <ns0:participantRef>sid-0670AAF5-D237-4731-9EF8-726C99C4BC20</ns0:participantRef>\n      <ns0:messageFlowRef>sid-6b54f913-80bc-45f3-a7a0-8a1f7b78329e</ns0:messageFlowRef>\n    </ns0:choreographyTask>\n    <ns0:choreographyTask id=\"sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F\" initiatingParticipantRef=\"sid-32934551-C23E-48A1-81C6-D44D062E5D66\" loopType=\"None\" name=\"Pizza liefern\">\n      <ns0:incoming>sid-14A00980-FCD2-45D1-BDA9-779F9345EF79</ns0:incoming>\n      <ns0:outgoing>sid-9DCBF847-85A9-4270-8C15-B5B0DA249641</ns0:outgoing>\n      <ns0:participantRef>sid-32934551-C23E-48A1-81C6-D44D062E5D66</ns0:participantRef>\n      <ns0:participantRef>sid-F04DC1D1-BD47-4C69-B9A9-CDA2B88C9C22</ns0:participantRef>\n      <ns0:messageFlowRef>sid-76c40f0c-665e-40d1-b567-8bc3925d58e9</ns0:messageFlowRef>\n    </ns0:choreographyTask>\n    <ns0:choreographyTask id=\"sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A\" initiatingParticipantRef=\"sid-C730CE7E-408D-4080-BEB6-EB72716BA52F\" loopType=\"None\" name=\"Geld kassieren\">\n      <ns0:incoming>sid-9DCBF847-85A9-4270-8C15-B5B0DA249641</ns0:incoming>\n      <ns0:outgoing>sid-F53F0498-4D0D-42C9-A86C-5CFCA6C5A50E</ns0:outgoing>\n      <ns0:participantRef>sid-C730CE7E-408D-4080-BEB6-EB72716BA52F</ns0:participantRef>\n      <ns0:participantRef>sid-243F2E1F-CBE8-400D-B73C-11759D18257B</ns0:participantRef>\n      <ns0:messageFlowRef>sid-7a6648e1-7deb-4ba5-b39e-ea3b2f14928e</ns0:messageFlowRef>\n      <ns0:messageFlowRef>sid-4d1ef1f7-cc91-4607-9647-91af961be589</ns0:messageFlowRef>\n    </ns0:choreographyTask>\n    <ns0:startEvent id=\"sid-1F500A0A-CBDD-49DE-B1D6-111A7BD85C36\" name=\"\">\n      <ns0:outgoing>sid-76635492-D9AD-4F1C-B2A2-A2C4778583B2</ns0:outgoing>\n    </ns0:startEvent>\n    <ns0:endEvent id=\"sid-8ABCB8A8-77B0-4564-9507-F15FCF22A32B\" name=\"\">\n      <ns0:incoming>sid-F53F0498-4D0D-42C9-A86C-5CFCA6C5A50E</ns0:incoming>\n    </ns0:endEvent>\n    <ns0:sequenceFlow id=\"sid-76635492-D9AD-4F1C-B2A2-A2C4778583B2\" name=\"\" sourceRef=\"sid-1F500A0A-CBDD-49DE-B1D6-111A7BD85C36\" targetRef=\"sid-70719FD1-1348-40DB-A065-457E488DDAC4\"></ns0:sequenceFlow>\n    <ns0:sequenceFlow id=\"sid-9DCBF847-85A9-4270-8C15-B5B0DA249641\" name=\"\" sourceRef=\"sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F\" targetRef=\"sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A\"></ns0:sequenceFlow>\n    <ns0:sequenceFlow id=\"sid-F53F0498-4D0D-42C9-A86C-5CFCA6C5A50E\" name=\"\" sourceRef=\"sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A\" targetRef=\"sid-8ABCB8A8-77B0-4564-9507-F15FCF22A32B\"></ns0:sequenceFlow>\n    <ns0:sequenceFlow id=\"sid-14A00980-FCD2-45D1-BDA9-779F9345EF79\" name=\"\" sourceRef=\"sid-70719FD1-1348-40DB-A065-457E488DDAC4\" targetRef=\"sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F\"></ns0:sequenceFlow>\n  </ns0:choreography>\n</ns0:definitions>\n",
  "output": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract sid_3671b301_367a_4a67_a107_c711715b848e {\n    // Participants:\n    // 0: sid-821CF910-E035-4D49-B948-8F65BB454A51 (Kunde)\n    // 1: sid-0670AAF5-D237-4731-9EF8-726C99C4BC20 (Lieferant)\n    // 2: sid-32934551-C23E-48A1-81C6-D44D062E5D66 (Lieferant)\n    // 3: sid-F04DC1D1-BD47-4C69-B9A9-CDA2B88C9C22 (Kunde)\n    // 4: sid-C730CE7E-408D-4080-BEB6-EB72716BA52F (Lieferant)\n    // 5: sid-243F2E1F-CBE8-400D-B73C-11759D18257B (Kunde)\n    address[6] public participants;\n\n    // tokenState bitmask:\n    // 0x01: at sid-70719FD1-1348-40DB-A065-457E488DDAC4 (Pizza bestellen)\n    // 0x02: at sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F (Pizza liefern)\n    // 0x04: at sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A (Geld kassieren)\n    // 0x08: end state (sid-8ABCB8A8-77B0-4564-9507-F15FCF22A32B), process ends\n\n    uint public tokenState = 0x01; // Start at 'Pizza bestellen'\n    uint public conditions;\n\n    constructor(address[6] memory _participants) {\n        participants = _participants;\n    }\n\n    function setConditions(uint _conditions) external {\n        conditions = _conditions;\n    }\n\n    /// @notice Enact a choreography task if allowed. taskID mapping:\n    /// 0: sid-70719FD1-1348-40DB-A065-457E488DDAC4 (Pizza bestellen)\n    /// 1: sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F (Pizza liefern)\n    /// 2: sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A (Geld kassieren)\n    function enact(uint taskID) external {\n        uint _tokenState = tokenState;\n\n        // repeat as long as internal transitions are possible (none in this process)\n        while (_tokenState != 0) {\n            // ---- Pizza bestellen (sid-70719FD1-1348-40DB-A065-457E488DDAC4), taskID=0, initiatingParticipant=sid-821CF910-E035-4D49-B948-8F65BB454A51 (participants[0])\n            if (_tokenState & 0x01 != 0) {\n                if (taskID == 0 && msg.sender == participants[0]) {\n                    // Complete 'Pizza bestellen', move token to 'Pizza liefern'\n                    _tokenState &= ~uint(0x01);\n                    _tokenState |= 0x02;\n                    continue;\n                }\n            }\n            // ---- Pizza liefern (sid-87C5FDC5-7D42-4F15-B0D5-983F71ED806F), taskID=1, initiatingParticipant=sid-32934551-C23E-48A1-81C6-D44D062E5D66 (participants[2])\n            if (_tokenState & 0x02 != 0) {\n                if (taskID == 1 && msg.sender == participants[2]) {\n                    // Complete 'Pizza liefern', move token to 'Geld kassieren'\n                    _tokenState &= ~uint(0x02);\n                    _tokenState |= 0x04;\n                    continue;\n                }\n            }\n            // ---- Geld kassieren (sid-99ABCD46-49C9-4AD1-94B2-788BA9ACA06A), taskID=2, initiatingParticipant=sid-C730CE7E-408D-4080-BEB6-EB72716BA52F (participants[4])\n            if (_tokenState & 0x04 != 0) {\n                if (taskID == 2 && msg.sender == participants[4]) {\n                    // Complete 'Geld kassieren', move token to end\n                    _tokenState &= ~uint(0x04);\n                    _tokenState |= 0x08;\n                    continue;\n                }\n            }\n            // End event: clear tokenState to zero (process ends)\n            if (_tokenState & 0x08 != 0) {\n                _tokenState = 0;\n                break;\n            }\n            // No further transitions\n            break;\n        }\n\n        tokenState = _tokenState;\n    }\n}",
  "processID": "sid_3671b301_367a_4a67_a107_c711715b848e",
  "usage": {
    "prompt_tokens": 5755,
    "completion_tokens": 1122,
    "total_tokens": 6877,
    "cost": 0.016454
  }
}