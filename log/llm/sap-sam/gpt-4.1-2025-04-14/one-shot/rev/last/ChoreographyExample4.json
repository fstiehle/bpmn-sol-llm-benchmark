{
  "name": "GPT 4.1 - One Shot Revised",
  "timestamp": "2025-06-05T15:21:25.158Z",
  "model": "gpt-4.1-2025-04-14",
  "prompt": "Generate a Solidity smart contract from the BPMN 2.0 choreography model XML provided above.\n\nUse the following implementation rules:\n\n- The contract name must be the `id` of the `<choreography>` element in the model.\n- Implement the function `enact(uint taskID) external` which allows a participant to execute a choreography task.\n- Only `<choreographyTask>` elements are executable via `enact()`. Gateways and start/end events are handled internally.\n- Enforce the order of task execution based on `<sequenceFlow>` elements and the choreography's control flow.\nUse the following mapping of taskID to `choreographyTask` id of the model:\n```json\n{\"ChoreographyTask_1vnykqp\":0,\"ChoreographyTask_16lc74v\":1,\"ChoreographyTask_07t2zjo\":2,\"ChoreographyTask_056ylqg\":3,\"ChoreographyTask_0belpst\":4}\n```\n- Implement exclusive gateways (`<exclusiveGateway>`) using Solidity conditional logic.\n  - Each exclusive gateway must evaluate all conditional `<sequenceFlow>` elements when active.\n  - Use Solidity `if (conditions & N == N)` syntax, exactly as defined in the `<conditionExpression>`.\n  - If at least one condition is satisfied, activate the target task.\n  - If none are satisfied, follow the `default` sequenceFlow.\n  - Each condition must be evaluated only when the gateway's bit is active in `tokenState`.\n  - Do not share or reuse conditions across unrelated gateways unless identical.\n  - Use a variable `uint public conditions` and include a setter: `function setConditions(uint _conditions) external`.\n\n- Implement parallel gateways (`<parallelGateway>`) as:\n  - Join: wait for all incoming tokens to activate.\n  - Split: activate all outgoing tasks concurrently.\n\n- Use `uint public tokenState` to encode current control flow positions:\n  - Each active task or gateway is tracked using a unique bit (e.g., 1, 2, 4, 8...).\n  - Use bitmasking (`&`, `|`, `~`) to activate or deactivate paths.\n  - Transitions may activate multiple concurrent paths.\n\n- Use the constructor: `constructor(address[n] memory _participants)` where `n` is the number of participants.\n- Allow execution of each task only by the correct initiating participant, using:\n  ```solidity\n  require(msg.sender == participants[i]);\n  ```\n- Use this mapping of participant index to participant ID:\n```json\n{\"Participant_1tzf68i\":0,\"Participant_198pz14\":1,\"Participant_0378t5g\":2}\n```\n\n- At the end of the process, set `tokenState = 0` to indicate termination.\n- Do not output any text other than the Solidity contract itself.\n\nAn example.\nGiven the choreography\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions id=\"_tTv5YOycEeiHGOQ2NkJZNQ\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <message id=\"Message_032z8ml\"></message>\n  <message id=\"Message_19qrd5q\"></message>\n  <message id=\"Message_0vnm1wq\"></message>\n  <message id=\"Message_085o98p\"></message>\n  <choreography id=\"ChoreographyExample\">\n    <participant id=\"Participant_1tzf68i\" name=\"Customer\"></participant>\n    <participant id=\"Participant_198pz14\" name=\"Seller\"></participant>\n    <participant id=\"Participant_0378t5g\" name=\"Manufacturer\"></participant>\n    <messageFlow id=\"MessageFlow_0r98f9o\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_032z8ml\"></messageFlow>\n    <messageFlow id=\"MessageFlow_18xf3u6\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_19qrd5q\"></messageFlow>\n    <messageFlow id=\"MessageFlow_0r00txu\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_0378t5g\" messageRef=\"Message_0vnm1wq\"></messageFlow>\n    <messageFlow id=\"MessageFlow_1cx9rl4\" sourceRef=\"Participant_1tzf68i\" targetRef=\"Participant_198pz14\" messageRef=\"Message_085o98p\"></messageFlow>\n    <startEvent id=\"Event_0y1sdn3\">\n      <outgoing>Flow_0e2c805</outgoing>\n    </startEvent>\n    <choreographyTask id=\"ChoreographyTask_1vnykqp\" name=\"Order goods\" initiatingParticipantRef=\"Participant_1tzf68i\">\n      <incoming>Flow_0e2c805</incoming>\n      <outgoing>Flow_0d6j7vb</outgoing>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <participantRef>Participant_198pz14</participantRef>\n      <messageFlowRef>MessageFlow_1cx9rl4</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_16lc74v\" name=\"Produce goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_0ybxbuc</incoming>\n      <outgoing>Flow_14ulro8</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_0378t5g</participantRef>\n      <messageFlowRef>MessageFlow_0r00txu</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_07t2zjo\" name=\"Inform customer\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_02gqwyg</incoming>\n      <outgoing>Flow_1kim4vq</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_18xf3u6</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_056ylqg\" name=\"Ship goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_11zi7qu</incoming>\n      <outgoing>Flow_04lnqsf</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_0r98f9o</messageFlowRef>\n    </choreographyTask>\n    <sequenceFlow id=\"Flow_0e2c805\" sourceRef=\"Event_0y1sdn3\" targetRef=\"ChoreographyTask_1vnykqp\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0d6j7vb\" sourceRef=\"ChoreographyTask_1vnykqp\" targetRef=\"Gateway_1bpkhpg\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0ymdsa2\" name=\"unavailable\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1klfaw3\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0ybxbuc\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_16lc74v\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_02gqwyg\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_07t2zjo\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_1kim4vq\" sourceRef=\"ChoreographyTask_07t2zjo\" targetRef=\"Gateway_0xcnzox\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_14ulro8\" sourceRef=\"ChoreographyTask_16lc74v\" targetRef=\"Gateway_0xcnzox\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_067nql1\" name=\"available\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1yl9mch\">\n      <conditionExpression xsi:type=\"bpmn2:tFormalExpression\" language=\"Solidity\">conditions &amp; 1 == 1</conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"Flow_198zju1\" sourceRef=\"Gateway_0xcnzox\" targetRef=\"Gateway_1yl9mch\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_11zi7qu\" sourceRef=\"Gateway_1yl9mch\" targetRef=\"ChoreographyTask_056ylqg\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_04lnqsf\" sourceRef=\"ChoreographyTask_056ylqg\" targetRef=\"Event_1ezlk4g\"></sequenceFlow>\n    <exclusiveGateway id=\"Gateway_1bpkhpg\" default=\"Flow_0ymdsa2\">\n      <incoming>Flow_0d6j7vb</incoming>\n      <outgoing>Flow_0ymdsa2</outgoing>\n      <outgoing>Flow_067nql1</outgoing>\n    </exclusiveGateway>\n    <exclusiveGateway id=\"Gateway_1yl9mch\" default=\"Flow_11zi7qu\">\n      <incoming>Flow_067nql1</incoming>\n      <incoming>Flow_198zju1</incoming>\n      <outgoing>Flow_11zi7qu</outgoing>\n    </exclusiveGateway>\n    <parallelGateway id=\"Gateway_1klfaw3\">\n      <incoming>Flow_0ymdsa2</incoming>\n      <outgoing>Flow_0ybxbuc</outgoing>\n      <outgoing>Flow_02gqwyg</outgoing>\n    </parallelGateway>\n    <parallelGateway id=\"Gateway_0xcnzox\">\n      <incoming>Flow_1kim4vq</incoming>\n      <incoming>Flow_14ulro8</incoming>\n      <outgoing>Flow_198zju1</outgoing>\n    </parallelGateway>\n    <endEvent id=\"Event_1ezlk4g\">\n      <incoming>Flow_04lnqsf</incoming>\n    </endEvent>\n  </choreography>\n</definitions>\n```\nA correct implementation is:\n```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract ChoreographyExample {\n  // The example code uses bitmasking for the current state, as it is more efficient.\n  // tokenState represents the current active elements, which can include multiple concurrent paths.\n  uint public tokenState = 1;\n  address[3] public participants;\n  uint public conditions;\n\n  constructor(address[3] memory _participants) {\n    participants = _participants;\n  }\n  function setConditions(uint _conditions) external {\n    conditions = _conditions;\n  }\n\n  function enact(uint id) external {\n    uint _tokenState = tokenState;\n\n    while(_tokenState != 0) {\n      if (_tokenState & 1 == 1) {\n        // <--- ChoreographyTask_1vnykqp Order goods --->\n        if (0 == id && msg.sender == participants[0]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(1);\n        _tokenState |= 6;\n        continue; \n        }\n      }\n      if (_tokenState & 2 == 2) {\n        // <--- ChoreographyTask_16lc74v Produce goods --->\n        if (1 == id && msg.sender == participants[1]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(2);\n        _tokenState |= 8;\n        continue; \n        }\n      }\n      if (_tokenState & 4 == 4) {\n        // <--- ChoreographyTask_07t2zjo Inform customer --->\n        if (2 == id && msg.sender == participants[1]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(4);\n        _tokenState |= 16;\n        continue; \n        }\n      }\n      if (_tokenState & 32 == 32) {\n        // <--- ChoreographyTask_056ylqg Ship goods --->\n        if (3 == id && msg.sender == participants[1]) {\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(32);\n        _tokenState |= 0;\n        break; // is end\n        }\n      }\n      if (_tokenState & 6 == 6) {\n        if (conditions & 1 == 1) {\n          // <---  auto transition  --->\n          // Transition: deactivate current, activate next state\n          _tokenState &= ~uint(6);\n          _tokenState |= 32;\n          continue; \n        }\n      }\n      if (_tokenState & 24 == 24) {\n        // <---  auto transition  --->\n        // Transition: deactivate current, activate next state\n        _tokenState &= ~uint(24);\n        _tokenState |= 32;\n        continue; \n      }\n      break;\n    }\n\n    tokenState = _tokenState;\n  }\n\n}\n```",
  "input": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions id=\"_tTv5YOycEeiHGOQ2NkJZNQ\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <message id=\"Message_14tgyqb\"></message>\n  <message id=\"Message_032z8ml\"></message>\n  <message id=\"Message_19qrd5q\"></message>\n  <message id=\"Message_0vnm1wq\"></message>\n  <message id=\"Message_085o98p\"></message>\n  <choreography id=\"ChoreographyExample4\" name=\"ChoreographyExample4\">\n    <participant id=\"Participant_1tzf68i\" name=\"Customer\"></participant>\n    <participant id=\"Participant_198pz14\" name=\"Seller\"></participant>\n    <participant id=\"Participant_0378t5g\" name=\"Manufacturer\"></participant>\n    <messageFlow id=\"MessageFlow_1ceh3mv\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_14tgyqb\"></messageFlow>\n    <messageFlow id=\"MessageFlow_0r98f9o\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_032z8ml\"></messageFlow>\n    <messageFlow id=\"MessageFlow_18xf3u6\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_1tzf68i\" messageRef=\"Message_19qrd5q\"></messageFlow>\n    <messageFlow id=\"MessageFlow_0r00txu\" sourceRef=\"Participant_198pz14\" targetRef=\"Participant_0378t5g\" messageRef=\"Message_0vnm1wq\"></messageFlow>\n    <messageFlow id=\"MessageFlow_1cx9rl4\" sourceRef=\"Participant_1tzf68i\" targetRef=\"Participant_198pz14\" messageRef=\"Message_085o98p\"></messageFlow>\n    <startEvent id=\"Event_0y1sdn3\">\n      <outgoing>Flow_0e2c805</outgoing>\n    </startEvent>\n    <choreographyTask id=\"ChoreographyTask_1vnykqp\" name=\"Order goods\" initiatingParticipantRef=\"Participant_1tzf68i\">\n      <incoming>Flow_0e2c805</incoming>\n      <outgoing>Flow_0d6j7vb</outgoing>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <participantRef>Participant_198pz14</participantRef>\n      <messageFlowRef>MessageFlow_1cx9rl4</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_16lc74v\" name=\"Produce goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_0ybxbuc</incoming>\n      <outgoing>Flow_14ulro8</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_0378t5g</participantRef>\n      <messageFlowRef>MessageFlow_0r00txu</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_07t2zjo\" name=\"Inform customer\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_02gqwyg</incoming>\n      <outgoing>Flow_1kim4vq</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_18xf3u6</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_056ylqg\" name=\"Ship goods\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_00eesh8</incoming>\n      <outgoing>Flow_04lnqsf</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_0r98f9o</messageFlowRef>\n    </choreographyTask>\n    <choreographyTask id=\"ChoreographyTask_0belpst\" name=\"Confirm ETA\" initiatingParticipantRef=\"Participant_198pz14\">\n      <incoming>Flow_067nql1</incoming>\n      <outgoing>Flow_0fgvp2x</outgoing>\n      <participantRef>Participant_198pz14</participantRef>\n      <participantRef>Participant_1tzf68i</participantRef>\n      <messageFlowRef>MessageFlow_1ceh3mv</messageFlowRef>\n    </choreographyTask>\n    <sequenceFlow id=\"Flow_0e2c805\" sourceRef=\"Event_0y1sdn3\" targetRef=\"ChoreographyTask_1vnykqp\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0d6j7vb\" sourceRef=\"ChoreographyTask_1vnykqp\" targetRef=\"Gateway_1bpkhpg\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0ymdsa2\" name=\"unavailable\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"Gateway_1klfaw3\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0ybxbuc\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_16lc74v\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_02gqwyg\" sourceRef=\"Gateway_1klfaw3\" targetRef=\"ChoreographyTask_07t2zjo\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_1kim4vq\" sourceRef=\"ChoreographyTask_07t2zjo\" targetRef=\"Gateway_0xcnzox\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_14ulro8\" sourceRef=\"ChoreographyTask_16lc74v\" targetRef=\"Gateway_0xcnzox\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_067nql1\" name=\"conditions &amp; 1 == 1\" sourceRef=\"Gateway_1bpkhpg\" targetRef=\"ChoreographyTask_0belpst\">\n      <conditionExpression xsi:type=\"bpmn2:tFormalExpression\" language=\"Solidity\">conditions &amp; 1 == 1</conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"Flow_198zju1\" sourceRef=\"Gateway_0xcnzox\" targetRef=\"Gateway_1yl9mch\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_04lnqsf\" sourceRef=\"ChoreographyTask_056ylqg\" targetRef=\"Event_1ezlk4g\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_0rkyvkz\" sourceRef=\"Gateway_1yl9mch\" targetRef=\"Gateway_069256q\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_1t2mfkx\" name=\"Pickup\" sourceRef=\"Gateway_069256q\" targetRef=\"Event_1ezlk4g\"></sequenceFlow>\n    <sequenceFlow id=\"Flow_00eesh8\" name=\"conditions &amp; 2 == 2\" sourceRef=\"Gateway_069256q\" targetRef=\"ChoreographyTask_056ylqg\">\n      <conditionExpression xsi:type=\"bpmn2:tFormalExpression\" language=\"Solidity\">conditions &amp; 2 == 2</conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"Flow_0fgvp2x\" sourceRef=\"ChoreographyTask_0belpst\" targetRef=\"Gateway_1yl9mch\"></sequenceFlow>\n    <exclusiveGateway id=\"Gateway_1bpkhpg\" default=\"Flow_0ymdsa2\">\n      <incoming>Flow_0d6j7vb</incoming>\n      <outgoing>Flow_0ymdsa2</outgoing>\n      <outgoing>Flow_067nql1</outgoing>\n    </exclusiveGateway>\n    <exclusiveGateway id=\"Gateway_1yl9mch\" default=\"Flow_0rkyvkz\">\n      <incoming>Flow_198zju1</incoming>\n      <incoming>Flow_0fgvp2x</incoming>\n      <outgoing>Flow_0rkyvkz</outgoing>\n    </exclusiveGateway>\n    <exclusiveGateway id=\"Gateway_069256q\" default=\"Flow_1t2mfkx\">\n      <incoming>Flow_0rkyvkz</incoming>\n      <outgoing>Flow_1t2mfkx</outgoing>\n      <outgoing>Flow_00eesh8</outgoing>\n    </exclusiveGateway>\n    <parallelGateway id=\"Gateway_1klfaw3\">\n      <incoming>Flow_0ymdsa2</incoming>\n      <outgoing>Flow_0ybxbuc</outgoing>\n      <outgoing>Flow_02gqwyg</outgoing>\n    </parallelGateway>\n    <parallelGateway id=\"Gateway_0xcnzox\">\n      <incoming>Flow_1kim4vq</incoming>\n      <incoming>Flow_14ulro8</incoming>\n      <outgoing>Flow_198zju1</outgoing>\n    </parallelGateway>\n    <endEvent id=\"Event_1ezlk4g\">\n      <incoming>Flow_04lnqsf</incoming>\n      <incoming>Flow_1t2mfkx</incoming>\n    </endEvent>\n  </choreography>\n</definitions>\n",
  "output": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract ChoreographyExample4 {\n  uint public tokenState = 1;\n  address[3] public participants;\n  uint public conditions;\n\n  constructor(address[3] memory _participants) {\n    participants = _participants;\n  }\n  function setConditions(uint _conditions) external {\n    conditions = _conditions;\n  }\n\n  function enact(uint id) external {\n    uint _tokenState = tokenState;\n\n    while(_tokenState != 0) {\n      // ChoreographyTask_1vnykqp: Order goods (taskID 0, initiator participants[0])\n      if (_tokenState & 1 == 1) {\n        if (id == 0 && msg.sender == participants[0]) {\n          // Transition: deactivate current, activate next state (exclusiveGateway Gateway_1bpkhpg: bit 2)\n          _tokenState &= ~uint(1);\n          _tokenState |= 2;\n          continue;\n        }\n      }\n      // ExclusiveGateway Gateway_1bpkhpg (bit 2), default: Flow_0ymdsa2 (to Gateway_1klfaw3, bit 4), conditional: Flow_067nql1 (to ChoreographyTask_0belpst, bit 256)\n      if (_tokenState & 2 == 2) {\n        if (conditions & 1 == 1) {\n          // Condition met, to ChoreographyTask_0belpst (bit 256)\n          _tokenState &= ~uint(2);\n          _tokenState |= 256;\n          continue;\n        } else {\n          // Default path to parallelGateway Gateway_1klfaw3 (bit 4)\n          _tokenState &= ~uint(2);\n          _tokenState |= 4;\n          continue;\n        }\n      }\n      // ParallelGateway Gateway_1klfaw3 (bit 4): split to ChoreographyTask_16lc74v (bit 8) and ChoreographyTask_07t2zjo (bit 16)\n      if (_tokenState & 4 == 4) {\n        // Split: activate both outgoing tasks\n        _tokenState &= ~uint(4);\n        _tokenState |= 8 | 16;\n        continue;\n      }\n      // ChoreographyTask_16lc74v: Produce goods (taskID 1, initiator participants[1])\n      if (_tokenState & 8 == 8) {\n        if (id == 1 && msg.sender == participants[1]) {\n          // Transition: deactivate current, activate next state (parallelGateway Gateway_0xcnzox: bit 64)\n          _tokenState &= ~uint(8);\n          _tokenState |= 64;\n          continue;\n        }\n      }\n      // ChoreographyTask_07t2zjo: Inform customer (taskID 2, initiator participants[1])\n      if (_tokenState & 16 == 16) {\n        if (id == 2 && msg.sender == participants[1]) {\n          // Transition: deactivate current, activate next state (parallelGateway Gateway_0xcnzox: bit 64)\n          _tokenState &= ~uint(16);\n          _tokenState |= 64;\n          continue;\n        }\n      }\n      // ParallelGateway Gateway_0xcnzox (bit 64): join, wait for both ChoreographyTask_16lc74v and ChoreographyTask_07t2zjo to finish\n      // incoming: from both tasks, so join when both have finished and both bits (8 and 16) are zero, then activate Gateway_0xcnzox\n      // In this implementation, we activate bit 64 for each incoming, so we need to check if both are done (8 and 16 not set), and both have activated bit 64.\n      // But in this pattern, after both tasks transition and set bit 64, we need to join them and move forward.\n      // The best way is: if both 8 and 16 are not set, and bit 64 is set at least twice (i.e., 64 or 128), we proceed.\n      // But in this encoding, each incoming sets 64. We need to join and only proceed when both tasks have completed and both bits 8 and 16 are cleared, and both incoming transitions have occurred.\n      // Because both transitions set bit 64, after both are set, we proceed.\n      // Instead, we process when both 64 and 128 bits are set.\n      // But to keep it simple, let's use a counter variable (not allowed by your constraints), or just process when both 8 and 16 are clear and at least one 64 is set.\n      // However, as in your example, parallelGateway is represented as a single bit, and after both transitions, both 8 and 16 are cleared, and 64 is set (possibly twice, but bitwise OR doesn't add up).\n      // So, proceed when (tokenState & (8|16)) == 0 && (tokenState & 64) == 64.\n\n      // Join for Gateway_0xcnzox: when both 8 and 16 are not set, and 64 is set\n      if ((_tokenState & (8|16)) == 0 && (_tokenState & 64) == 64) {\n        // Both incoming complete, proceed to Gateway_1yl9mch (bit 128)\n        _tokenState &= ~uint(64);\n        _tokenState |= 128;\n        continue;\n      }\n      // ExclusiveGateway Gateway_1yl9mch (bit 128), default: Flow_0rkyvkz (to Gateway_069256q, bit 512)\n      if (_tokenState & 128 == 128) {\n        // Only one outgoing, so just forward to Gateway_069256q (bit 512)\n        _tokenState &= ~uint(128);\n        _tokenState |= 512;\n        continue;\n      }\n      // ChoreographyTask_0belpst: Confirm ETA (taskID 4, initiator participants[1])\n      if (_tokenState & 256 == 256) {\n        if (id == 4 && msg.sender == participants[1]) {\n          // Transition: deactivate current, activate next state (Gateway_1yl9mch: bit 128)\n          _tokenState &= ~uint(256);\n          _tokenState |= 128;\n          continue;\n        }\n      }\n      // ExclusiveGateway Gateway_069256q (bit 512), default: Flow_1t2mfkx (to end), conditional: Flow_00eesh8 (to ChoreographyTask_056ylqg, bit 32)\n      if (_tokenState & 512 == 512) {\n        if (conditions & 2 == 2) {\n          // Condition met, to ChoreographyTask_056ylqg (bit 32)\n          _tokenState &= ~uint(512);\n          _tokenState |= 32;\n          continue;\n        } else {\n          // Default path to end event: set tokenState = 0\n          _tokenState = 0;\n          break;\n        }\n      }\n      // ChoreographyTask_056ylqg: Ship goods (taskID 3, initiator participants[1])\n      if (_tokenState & 32 == 32) {\n        if (id == 3 && msg.sender == participants[1]) {\n          // Transition: deactivate current, end event reached, set tokenState = 0\n          _tokenState &= ~uint(32);\n          _tokenState = 0;\n          break;\n        }\n      }\n      break;\n    }\n\n    tokenState = _tokenState;\n  }\n}",
  "processID": "ChoreographyExample4",
  "compiled": true
}